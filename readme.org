#+TITLE: Emacs configuration
#+PROPERTY: header-args:elisp :tangle "init.el"

* Package management
  Initial bootstrapping and things related to package management.

** Repositories
   Set emacs package repositories.
  #+begin_src elisp
    (require 'package)
    (setq package-enable-at-startup nil)

    (setq package-archives
          (append (eval (car (get 'package-archives 'standard-value)))
                  '(("org" . "http://orgmode.org/elpa/")
                    ("melpa" . "http://melpa.org/packages/")
                    ("elpy" . "https://jorgenschaefer.github.io/packages/"))))
    (package-initialize)
  #+end_src

** =use-package=
   Bootstrap =use-package= using built-in package.el.
   All further configuration will be performed using it's DSL.

   #+begin_src elisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package)
      (require 'use-package)
      (setq use-package-always-ensure t))
   #+end_src

*** Environment variables
    Set some rare used environment variables to control further configuration.
    #+begin_src elisp
      (when (getenv "FAST") (setq use-package-always-ensure t))
      (when (getenv "STATS") (setq use-package-compute-statistics t))
    #+end_src

*** =use-package= dependencies
    #+begin_src elisp
      (use-package bind-key
	:ensure t)

      (use-package delight
	:ensure t)
     #+end_src

** System package management
   =system-packages= allows to install packages via system package manager in
   a configurable way.
   #+begin_src elisp
     (use-package system-packages
       :ensure t
       :custom
       (system-packages-noconfirm t))
   #+end_src

** Installation from sources
     =Quelpa= allows to build and install packages from sources.
     =quelpa-use-package= is integration package.
     #+begin_src elisp
       (use-package quelpa
	 :ensure t
	 :custom (quelpa-update-melpa-p nil))

       (use-package quelpa-use-package
	 :ensure t)
     #+end_src

** Improvements for =package.el=
   =paradox= can install packages asynchronously and has better UI for *M-x list-packages*.
   #+begin_src elisp
     (use-package paradox
       :ensure t
       :custom
       (paradox-execute-asynchronously t)
       :config
       (paradox-enable))
   #+end_src

** Temporarily package installation
   =try= installs package into temp directory without polluting /.emacs.d/.
   #+begin_src elisp
     (use-package try
       :ensure t)
    #+end_src

* Help & manuals
** Better help
   #+begin_src elisp
     (use-package helpful
       :ensure t
       :bind
       ("C-h f" . #'helpful-callable)
       ("C-h v" . #'helpful-variable)
       ("C-h k" . #'helpful-key)
       ("C-h F" . #'helpful-at-point)
       ("C-h F" . #'helpful-function)
       ("C-h C" . #'helpful-command))
   #+end_src

** Free keys
   #+begin_src elisp
     (use-package free-keys
       :ensure t)
    #+end_src
** Which key
   #+begin_src elisp
     (use-package which-key
       :ensure t
       :delight
       :config
       (which-key-mode))
   #+end_src

* Customize
  #+begin_src elisp
    (use-package cus-edit
      :ensure nil
      :after files
      :preface
      (defun load-custom-file ()
	(load custom-file 'noerror))
      (provide 'cus-edit)
      :hook (after-init . #'load-custom-file)
      :config
      (setq custom-file "~/.emacs.d/custom-file.el"))
   #+end_src

* GUI Components / Appearance

** Emacs variables that defined in C source code
  #+begin_src elisp
    (use-package emacs
      :ensure nil
      :init
      (put 'narrow-to-page 'disabled nil)
      (put 'narrow-to-region 'disabled nil)
      (put 'downcase-region 'disabled nil)
      :custom
      (use-dialog-box nil "Dialogs via minibuffer only.")
      (tool-bar-mode nil "Disable toolbar.")
      (menu-bar-mode nil "Disable menubar.")
      (scroll-bar-mode nil "Disable scrollbar.")
      (blink-cursor-mode nil "Disable cursor blinking.")
      (scroll-step 1 "Scroll line by line.")
      (scroll-margin 4 "Top and bottom scrolling margin.")
      (scroll-conservatively 101 "If >100 then never recenter point.")
      (inhibit-splash-screen t "Don't show the splash screen.")
      (initial-scratch-message nil "Disable initial scratch message.")

      (indicate-empty-lines t "Visually indicate empty lines.")
      (indicate-buffer-boundaries 'left "Show buffer boundaries at left fringe."))
  #+end_src

** Emacs C source code
   I quite often jump into C code from describe-* buffers.
    #+begin_src elisp
      (use-package find-func
	:ensure nil
	:custom
	(find-function-C-source-directory (expand-file-name "~/proj/emacs") "Emacs sources."))
    #+end_src

** Autorevert
    #+begin_src elisp
    (use-package autorevert
      :ensure nil
      :delight auto-revert-mode)
    #+end_src

** Frame
   Disable suspending (C-z), it's annoing and doesn't work properly with WSL.
   #+begin_src elisp
     (use-package frame
       :ensure nil
       :bind
       ("C-z" . nil))
   #+end_src

** Simple
   #+begin_src elisp
     (use-package simple
       :ensure nil
       :delight
       (visual-line-mode)
       :config
       (defalias 'yes-or-no-p 'y-or-n-p)
       :custom
       (line-number-mode t "Show line number in modeline.")
       (column-number-mode t "Show column number in modeline.")
       (size-indication-mode t "Show file size in modeline.")
       (global-visual-line-mode t "Enable visual-line-mode."))
   #+end_src

** Fonts & faces
*** COMMENT Fira ligatures for emacs
    Doesn't work properly yet.
    #+begin_src elisp
      (use-package fira-code-symbol
	:ensure nil
	:delight
	:hook
	(lisp-mode-hook . fira-code-symbol)
	(geiser-mode-hook . fira-code-symbol)
	(python-mode-hook . fira-code-symbol)
	(tuareg-mode-hook . fira-code-symbol)
	:quelpa
	(fira-code-symbol :repo "pkulev/fira-code-symbol"
			  :fetcher github :upgrade t))
    #+end_src

*** COMMENT Hack font
    #+begin_src elisp
      (use-package faces
	:ensure nil
	:config
	(set-face-attribute 'default
			    nil
			    :family "Hack"
			    :weight 'regular
			    :width 'semi-condensed
			    :height 120)
    #+end_src

*** Fira Code font
    #+begin_src elisp
      (use-package faces
	:ensure nil
	:config
	(set-face-attribute 'default
			    nil
			    :family "FiraCode"
			    :weight 'semi-light
			    :width 'semi-condensed
			    :height 130))
    #+end_src

*** Current line higlighting

    #+begin_src elisp
    (use-package hl-line
      :ensure nil
      :config
      (global-hl-line-mode 1)
      (set-face-background 'hl-line "#3e4446")
      (set-face-foreground 'highlight nil))
    #+end_src

*** Fringe settings
    #+begin_src elisp
      (use-package fringe
	:ensure nil
	:custom
	(fringe-mode '(8 . 0)))
    #+end_src

*** =reverse-im=
    #+begin_src elisp
      (use-package reverse-im
	:ensure t
	:config
	(reverse-im-activate "russian-computer"))
    #+end_src

** Theme
*** COMMENT Cool theme
    #+begin_src elisp
      (use-package color-theme-sanityinc-tomorrow
	:disabled
	:ensure t
	:init (load-theme 'sanityinc-tomorrow-eighties 'noconfirm))
    #+end_src

*** Very cool theme
    #+begin_src elisp
      (use-package zerodark-theme
	:ensure t
	:config
	(load-theme 'zerodark 'noconfirm)
	(zerodark-setup-modeline-format))
     #+end_src

** Icons
   #+begin_src elisp
     (use-package all-the-icons
       :ensure t
       :defer t
       :config
       (setq all-the-icons-mode-icon-alist
	     `(,@all-the-icons-mode-icon-alist
	       (package-menu-mode all-the-icons-octicon "package" :v-adjust 0.0))))
   #+end_src

   #+begin_src elisp
     (use-package all-the-icons-dired
       :ensure t
       :hook
       (dired-mode . all-the-icons-dired-mode))
   #+end_src

   #+begin_src elisp
     (use-package all-the-icons-ivy
       :ensure t
       :after ivy
       :custom
       (all-the-icons-ivy-buffer-commands '() "Don't use for buffers.")
       :config
       (all-the-icons-ivy-setup))
   #+end_src

** Whistles
   #+begin_src elisp
     (use-package time
       :ensure nil
       :custom
       (display-time-mode nil "Don't display time at modeline."))
  #+end_src

  #+begin_src elisp
     (use-package nyan-mode
       :ensure t
       :custom
       (nyan-bar-length 16)
       :config
       (nyan-mode))
  #+end_src

  #+begin_src elisp
     (use-package highlight-indent-guides
       :ensure t
       :defer t
       :delight
       :hook
       (prog-mode . highlight-indent-guides-mode)
       :custom
       (highlight-indent-guides-method 'character))
   #+end_src
* Buffer management
** COMMENT buffer selection
   #+begin_src elisp
     (use-package bs
       :ensure nil
       :bind ("M-z" . bs-show))
   #+end_src

** ibuffer
   #+begin_src elisp
     (use-package ibuffer
       :ensure nil
       :defer t
       :config
       (defalias 'list-buffers 'ibuffer))
   #+end_src

** ace-window
   Jump to window by number.
   #+begin_src elisp
     (use-package ace-window
       :ensure t
       :bind ("C-x w" . ace-window))
   #+end_src

* Dired
  #+begin_src elisp
    (use-package dired
      :ensure nil
      :bind ([remap list-directory] . dired)
      :config
      (setq dired-recursive-deletes 'top))

    (use-package dired-x
      :ensure nil)

    ;; TODO
    (use-package dired-subtree
      :ensure t)
  #+end_src

* Navigation
** Imenu jumps
   #+begin_src elisp
     (use-package imenu
       :ensure nil
       :bind ("C-c C-j" . imenu)
       :config
       (setq imenu-auto-rescan t)
       (setq imenu-use-popup-menu nil))
   #+end_src

** Avy
   #+begin_src elisp
     (use-package avy
       :ensure t
       :bind (("C-c j" . avy-goto-word-or-subword-1)
	      ("C-:" . avy-goto-char)
	      ("C-'" . avy-goto-char-2)))
   #+end_src

* Editing
** Multiple cursors
   #+begin_src elisp
     (use-package multiple-cursors
       :ensure t
       :bind (("C-S-c C-S-c" . mc/edit-lines)
	      ("C->" . mc/mark-next-like-this)
	      ("C-<" . mc/mark-previous-like-this)
	      ("C-c C-<" . mc/mark-all-like-this)))
   #+end_src

** Copy & Paste things

*** Copy as format
    #+begin_src elisp
      (use-package copy-as-format
	:ensure t
	:bind
	(:prefix-map
	 copy-as-format-prefix-map
	 :prefix "C-x c"
	 ("f" . copy-as-format)
	 ("a" . copy-as-format-asciidoc)
	 ("b" . copy-as-format-bitbucket)
	 ("d" . copy-as-format-disqus)
	 ("g" . copy-as-format-github)
	 ("l" . copy-as-format-gitlab)
	 ("c" . copy-as-format-hipchat)
	 ("h" . copy-as-format-html)
	 ("j" . copy-as-format-jira)
	 ("m" . copy-as-format-markdown)
	 ("w" . copy-as-format-mediawiki)
	 ("o" . copy-as-format-org-mode)
	 ("p" . copy-as-format-pod)
	 ("r" . copy-as-format-rst)
	 ("s" . copy-as-format-slack)))
     #+end_src

*** Links
    #+begin_src elisp
      (use-package link-hint
	:ensure t
	:bind
	(("C-x M-l o" . link-hint-open-link)
	 ("C-c M-l c" . link-hint-copy-link)))
    #+end_src

* Shell tools
  #+begin_src elisp
    (use-package shell
      :ensure nil
      :custom
      (explicit-shell-file-name "/bin/zsh" "Default inferior shell."))
  #+end_src

  #+begin_src elisp
    (use-package shell-pop
      :ensure t
      :bind (("C-`" . shell-pop)))
  #+end_src

* Path
** Syncing PATH
   #+begin_src elisp
       (use-package exec-path-from-shell
	 :ensure t
	 :config
	 (exec-path-from-shell-initialize))
   #+end_src

** Autosaves
   Don't spawn them across the filesystem.
   #+begin_src elisp
     (use-package files
       :ensure nil
       :custom
       (backup-directory-alist
	`((".*" . ,(concat user-emacs-directory "autosaves/"))))
       (auto-save-file-name-transforms
	`((".*" ,(concat user-emacs-directory "autosaves/") t))))
   #+end_src

** Quick emacs configuration file access
   #+begin_src elisp
     (use-package my-config-mode
       :ensure nil
       :preface
       (defun my-config-open ()
	 (interactive)
	 (find-file (concat user-emacs-directory "init.el")))

       (defun my-config-eval ()
	   (interactive)
	 (load-file (concat user-emacs-directory "init.el")))

       (provide 'my-config-mode)

       :bind
       (:map mode-specific-map
	     ("e o" . #'my-config-open)
	     ("e e" . #'my-config-eval)))
   #+end_src
* Autocomplete
** Company
   #+begin_src elisp
     (use-package company
       :ensure t
       :delight
       :bind
       (:map company-active-map
	     ("C-n" . company-select-next-or-abort)
	     ("C-p" . company-select-previous-or-abort))
       :hook
       (after-init . global-company-mode))
   #+end_src

   #+begin_src elisp
     (use-package company-quickhelp
       :ensure t
       :custom
       (company-quickhelp-delay 3)
       :config
       (company-quickhelp-mode 1))
   #+end_src

   #+begin_src elisp
     (use-package company-shell
       :ensure t
       :config
       (add-to-list 'company-backends 'company-shell))
   #+end_src

** Counsel
   #+begin_src elisp
     (use-package counsel
       :ensure t
       :delight
       :defer nil
       :bind (([remap menu-bar-open] . counsel-tmm)
	      ([remap insert-char] . counsel-unicode-char)
	      ([remap isearch-forward] . counsel-grep-or-swiper))
       :config
       (counsel-mode))
   #+end_src

   #+begin_src elisp
     (use-package counsel-projectile
       :ensure t
       :after counsel projectile
       :bind
       ("C-c p s" . counsel-projectile-ag)
       :config
       (counsel-projectile-mode))
   #+end_src

   #+begin_src elisp
     (use-package counsel-dash
       :ensure t
       :after counsel eww
       :requires eww
       :bind
       ;; (:map mode-specific-map ("d i" . counsel-dash-install-docset)
       ;;                         ("d u" . counsel-dash-uninstall-docset))
       ;;                          (""))
       :config
       (add-hook 'python-mode-hook (lambda () (setq-local counsel-dash-docsets '("Python"))))
       :custom
       (counsel-dash-browser-func 'eww-browse-url))
   #+end_src

** Swiper
   #+begin_src elisp
     (use-package swiper
       :ensure t
       :delight
       :defer nil
       :bind
       (([remap isearch-forward-symbol-at-point] . #'swiper-thing-at-point)))
   #+end_src

** Ivy
   #+begin_src elisp
     (use-package ivy
       :ensure t
       :delight
       :custom
       (ivy-use-virtual-buffers t)
       (ivy-re-builders-alist '((t . ivy--regex-plus) (t . ivy--regex-fuzzy)))
       (ivy-count-format "%d/%d " "Show anzu-like counter.")
       (ivy-use-selectable-prompt t "Make the prompt line selectable.")
       :custom-face
       (ivy-current-match ((t (:inherit 'hl-line))))
       :bind
       (:map mode-specific-map ("C-r" . ivy-resume))
       :config
       (ivy-mode t))

     (use-package ivy-rich
       :ensure t
       :after ivy
       :config
       (ivy-rich-mode))
   #+end_src

* COMMENT Bookmarks
  #+begin_src elisp
    (use-package bookmark
      :ensure nil
      :config
      (setq bookmark-save-flag t)
      (awhen (file-present? (bookmarks-file))
	(bookmark-load it t))
      (setq bookmark-default-file (bookmarks-file)))

    ;; TODO:
    (use-package bm
      :ensure t
      :bind (("<C-f2>" . bm-toggle)
	     ("<f2>"   . bm-next)
	     ("<S-f2>" . bm-previous)))
  #+end_src


* Local variables
  Tangle config on save hook.
  #+begin_src elisp :tangle no
    ;; Local Variables:
    ;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
    ;; flycheck-disabled-checkers: (emacs-lisp-checkdoc)
    ;; End:
  #+end_src

  Disable annoying checkdoc linter for cases if I want to open init.el.
  #+begin_src elisp
    ;; Local Variables:
    ;; flycheck-disabled-checkers: (emacs-lisp-checkdoc)
    ;; End:
  #+end_src
